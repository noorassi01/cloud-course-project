# coding: utf-8

"""
    Files API

    ![Maintained by: Noor Assi](https://img.shields.io/badge/Maintained%20by-MLOps%20Club-05998B?style=for-the-badge)  | Helpful Links | Notes | | --- | --- | | [Course Homepage](https://mlops-club.org) | | | [Course Student Portal](https://courses.mlops-club.org) | | | [Course Materials Repo](https://github.com/mlops-club/python-on-aws-course.git) | `mlops-club/python-on-aws-course` | | [Course Reference Project Repo](https://github.com/mlops-club/cloud-course-project.git) | `mlops-club/cloud-course-project` | | [FastAPI Documentation](https://fastapi.tiangolo.com/) | | | [Learn to make \"badges\"](https://shields.io/) | Example: <img alt=\"Awesome Badge\" src=\"https://img.shields.io/badge/Awesome-ðŸ˜Ž-blueviolet?style=for-the-badge\"> | 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, conlist
from files_api_sdk.models.validation_error import ValidationError

class HTTPValidationError(BaseModel):
    """
    HTTPValidationError
    """
    detail: Optional[conlist(ValidationError)] = None
    __properties = ["detail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HTTPValidationError:
        """Create an instance of HTTPValidationError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in detail (list)
        _items = []
        if self.detail:
            for _item in self.detail:
                if _item:
                    _items.append(_item.to_dict())
            _dict['detail'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HTTPValidationError:
        """Create an instance of HTTPValidationError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HTTPValidationError.parse_obj(obj)

        _obj = HTTPValidationError.parse_obj({
            "detail": [ValidationError.from_dict(_item) for _item in obj.get("detail")] if obj.get("detail") is not None else None
        })
        return _obj


